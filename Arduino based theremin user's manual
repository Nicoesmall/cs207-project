Arduino based theremin 
user’s manual





Contents

Getting started ………………………………………page 1.

Hardware list…………………………………………page 1.

Preparing……………………………………………..page 2.

Power…………………………………………………page 4.

Schematic ……………………………………………page 5.

Installing code ……………………………………….page 6.










by Nicole Small



How it works



	
	The Arduino based Theremin is a ultrasonic frequency  which generates a radio wave and  gives out the frequency signal to the Arduino board.
An ultrasonic range finder connected to the Arduino board, and the code provides the Theremin effect when a person or some conductive material is placed next to the ultrasonic range finder.
This leads to a slight frequency deviation of the frequency which is registered by the Arduino software.
The Arduino acts in this case as a accurate frequency meter which transforms this frequency deviation into sound or control signals. 







Hardware



Arduino uno
Piezo element
4.7k ohm resistor
100 ohm resistor
Breadboard
Hook-up wires
8EN136B5B Ultrasonic range finder
Power











											page 1.







Arduino Uno	                             Ultrasonic Range Finder













Resistor						Piezo Element





                                                                          					page 2.







		Power






Hook-up wires

Breadboad

											
											page 3.
Setup
page 4.


Schematic

























page 5.


Code

	 */
	const int pingPin = 7;
	const int buzzPin = 9;

	void setup() {
  	// initialize serial communication:
  	Serial.begin(9600);
  	pinMode(buzzPin,OUTPUT);
	}

	void loop()
	{
  	long duration, inches, cm;
  	pinMode(pingPin, OUTPUT);
  	digitalWrite(pingPin, LOW);
  	delayMicroseconds(2);
  	digitalWrite(pingPin, HIGH);
  	delayMicroseconds(5);
  	digitalWrite(pingPin, LOW);
  	pinMode(pingPin, INPUT);
  	duration = pulseIn(pingPin, HIGH);

  	// convert the time into a distance
  	inches = microsecondsToInches(duration);
  	cm = microsecondsToCentimeters(duration);
  	int freq = map(cm,0,14,200,500);
  	tone(buzzPin, freq);
  	Serial.print(inches);
  	Serial.print("in, ");
  	Serial.print(cm);
  	Serial.print("cm");
  	Serial.println();
  	delay(0);
	}
	long microsecondsToInches(long microseconds)
	{
  	// According to Parallax's datasheet for the PING))), there are
  	// 73.746 microseconds per inch (i.e. sound travels at 1130 feet per
  	// second).  This gives the distance travelled by the ping, outbound
  	// and return, so we divide by 2 to get the distance of the obstacle.
  	return microseconds / 74 / 2;
	}
	long microsecondsToCentimeters(long microseconds)
